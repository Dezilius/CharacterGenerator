/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UI;

import callofcthulhuDB.util.HibernateUtil;
import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 *
 * @author dezilius
 */
public class DBManagementUI extends javax.swing.JFrame {

    /** Creates new form DBManagementUI */
    public DBManagementUI() {
        initComponents();
    }

    private static final String QUERY_READ_ALL_FIRST_NAME="from FirstName";
    private static final String QUERY_READ_ALL_LAST_NAME="from LastName";
    private static final String QUERY_READ_ALL_PROFESSION="from Profession";
    
private void runQueryBasedOnFirstName() {
    executeHQLQueryFirstName(QUERY_READ_ALL_FIRST_NAME);
}
private void executeHQLQueryFirstName(String hql) {
    try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(hql);
        List resultList = q.list();
        displayResultFirstName(resultList);
        session.getTransaction().commit();
    } catch (HibernateException he) {
        he.printStackTrace();
    }
}
private void displayResultFirstName(List resultList) {
    Vector<String> tableHeaders = new Vector<String>();
    Vector tableData = new Vector();
    tableHeaders.add("FirstNameId"); 
    tableHeaders.add("FirstName");
    tableHeaders.add("sex");

    for(Object o : resultList) {
        callofcthulhuDB.entity.FirstName name = (callofcthulhuDB.entity.FirstName)o;
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(name.getId());
        oneRow.add(name.getFirstName());
        oneRow.add(name.getSex());
        tableData.add(oneRow);
    }
    DbTable.setModel(new DefaultTableModel(tableData, tableHeaders));
}

private void runQueryBasedOnLastName() {
    executeHQLQueryLastName(QUERY_READ_ALL_LAST_NAME);
}
private void executeHQLQueryLastName(String hql) {
    try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(hql);
        List resultList = q.list();
        displayResultLastName(resultList);
        session.getTransaction().commit();
    } catch (HibernateException he) {
        he.printStackTrace();
    }
}
private void displayResultLastName(List resultList) {
    Vector<String> tableHeaders = new Vector<String>();
    Vector tableData = new Vector();
    tableHeaders.add("LastNameId"); 
    tableHeaders.add("LastName");

    for(Object o : resultList) {
        callofcthulhuDB.entity.LastName name = (callofcthulhuDB.entity.LastName)o;
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(name.getId());
        oneRow.add(name.getLastName());
        tableData.add(oneRow);
    }
    DbTable.setModel(new DefaultTableModel(tableData, tableHeaders));
}

private void runQueryBasedOnProfession() {
    executeHQLQueryProfession(QUERY_READ_ALL_PROFESSION);
}
private void executeHQLQueryProfession(String hql) {
    try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(hql);
        List resultList = q.list();
        displayResultProfession(resultList);
        session.getTransaction().commit();
    } catch (HibernateException he) {
        he.printStackTrace();
    }
}
private void displayResultProfession(List resultList) {
    Vector<String> tableHeaders = new Vector<String>();
    Vector tableData = new Vector();
    tableHeaders = util.Tools.mapTable(tableHeaders);

    for(Object o : resultList) {
        callofcthulhuDB.entity.Profession name = (callofcthulhuDB.entity.Profession)o;
        Vector<Object> oneRow = new Vector<Object>();
        util.Tools.fillRow(oneRow, name);
        tableData.add(oneRow);
    }
    DbTable.setModel(new DefaultTableModel(tableData, tableHeaders));
}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        DbTable = new javax.swing.JTable();
        chooseBox = new javax.swing.JComboBox<>();
        readButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setLocation(new java.awt.Point(500, 500));

        DbTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ));
        DbTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        DbTable.setDragEnabled(true);
        jScrollPane1.setViewportView(DbTable);

        chooseBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FirstName", "LastName", "Profession" }));
        chooseBox.setMinimumSize(new java.awt.Dimension(100, 25));
        chooseBox.setName(""); // NOI18N

        readButton.setText("Read");
        readButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chooseBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(readButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(readButton))
                .addGap(44, 44, 44)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void readButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readButtonActionPerformed
        if (chooseBox.getSelectedItem().equals("FirstName")) {
            runQueryBasedOnFirstName();
        }
        else if (chooseBox.getSelectedItem().equals("LastName")) {
            runQueryBasedOnLastName();
        }
        else if (chooseBox.getSelectedItem().equals("Profession")) {
            runQueryBasedOnProfession();
        }
        
    }//GEN-LAST:event_readButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void start() {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DBManagementUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DbTable;
    private javax.swing.JComboBox<String> chooseBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton readButton;
    // End of variables declaration//GEN-END:variables

}
